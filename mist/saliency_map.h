// 
// Copyright (c) 2003-2011, MIST Project, Nagoya University
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
// 
// 1. Redistributions of source code must retain the above copyright notice,
// this list of conditions and the following disclaimer.
// 
// 2. Redistributions in binary form must reproduce the above copyright notice,
// this list of conditions and the following disclaimer in the documentation
// and/or other materials provided with the distribution.
// 
// 3. Neither the name of the Nagoya University nor the names of its contributors
// may be used to endorse or promote products derived from this software
// without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
// FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
// IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF
// THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// 

/// @file mist/saliency_map.h
//!
//! @brief Saliency map関連のアルゴリズム
//! 

#ifndef __INCLUDE_MIST_SALIENCY_MAP__
#define __INCLUDE_MIST_SALIENCY_MAP__

#ifndef __INCLUDE_MIST_H__
#include "mist.h"
#endif

#ifndef __INCLUDE_MIST_COLOR_H__
#include "config/color.h"
#endif

#ifndef __INCLUDE_MIST_INTERPOLATE__
#include "interpolate.h"
#endif

#ifndef __INCLUDE_FILTER_LINEAR_FILTER_H__
#include "filter/linear.h"
#endif


// mist名前空間の始まり
_MIST_BEGIN

// Saliency map用のGabor filter
namespace gabor
{
	typedef double						value_type;		///< @brief Gabor filterで利用するデータ型
	typedef mist::array2< value_type >	kernel_type;	///< @brief Gabor filterで利用するカーネルの型

	///< @brief Gabor filterで利用するカーネル（constだけどconst付けるとエラーになる）
	value_type GABOR_KERNELS[ ][ 17 ][ 17 ] = {	{	{ -0.000213458164049294360000,	-0.000216644186888885490000,	-0.000267420737091965140000,	-0.000216644186888885440000,	0.000150241317361511160000,		-0.000216644186888885630000,	-0.00141849613025914330000,		-0.000216644186888885380000,	0.00156829918464734320000,		-0.000216644186888885380000,	-0.00141849613025914330000,		-0.000216644186888885630000,	0.000150241317361511160000,		-0.000216644186888885440000,	-0.000267420737091965140000,	-0.000216644186888885490000,	-0.000213458164049294360000 },
													{ -0.000202603142700600670000,	-0.000216644186888885520000,	-0.000440420293033059370000,	-0.000216644186888885280000,	0.001400248044141730000,		-0.000216644186888886090000,	-0.00551329681440221750000,		-0.000216644186888885060000,	0.0076497365690452760000,		-0.000216644186888885060000,	-0.00551329681440221750000,		-0.000216644186888886090000,	0.001400248044141730000,		-0.000216644186888885280000,	-0.000440420293033059370000,	-0.000216644186888885520000,	-0.000202603142700600670000 },
													{ -0.000165867636685805850000,	-0.00021664418688888560000,		-0.00102588447810310350000,		-0.000216644186888884760000,	0.00563051421821007290000,		-0.000216644186888887630000,	-0.019370899699708920000,		-0.000216644186888883920000,	0.0282305049007476120000,		-0.000216644186888883920000,	-0.019370899699708920000,		-0.000216644186888887630000,	0.00563051421821007290000,		-0.000216644186888884760000,	-0.00102588447810310350000,		-0.00021664418688888560000,		-0.000165867636685805850000 },
													{ -6.59695199285921010000e-005,	-0.000216644186888885790000,	-0.0026179891164260210000,		-0.000216644186888883320000,	0.0171342518828273910000,		-0.000216644186888891860000,	-0.0570551071924256320000,		-0.00021664418688888080000,		0.0841976119531329390000,		-0.00021664418688888080000,		-0.0570551071924256320000,		-0.000216644186888891860000,	0.0171342518828273910000,		-0.000216644186888883320000,	-0.0026179891164260210000,		-0.000216644186888885790000,	-6.59695199285921010000e-005 },
													{ 0.000150241317361511160000,	-0.00021664418688888620000,		-0.00606380259198784420000,		-0.000216644186888880180000,	0.0420319459852840570000,		-0.0002166441868889010000,		-0.138615544156578060000,		-0.000216644186888874080000,	0.205327974259260050000,		-0.000216644186888874080000,	-0.138615544156578060000,		-0.0002166441868889010000,		0.0420319459852840570000,		-0.000216644186888880180000,	-0.00606380259198784420000,		-0.00021664418688888620000,		0.000150241317361511160000 },
													{ 0.000516406710280523270000,	-0.000216644186888886870000,	-0.0118994843784274890000,		-0.000216644186888874870000,	0.0841976119531329390000,		-0.000216644186888916470000,	-0.276742799117225710000,		-0.000216644186888862720000,	0.410469156191473670000,		-0.000216644186888862720000,	-0.276742799117225710000,		-0.000216644186888916470000,	0.0841976119531329390000,		-0.000216644186888874870000,	-0.0118994843784274890000,		-0.000216644186888886870000,	0.000516406710280523270000 },
													{ 0.000985207756481372430000,	-0.000216644186888887770000,	-0.019370899699708920000,		-0.000216644186888868090000,	0.13818225578280030000,			-0.000216644186888936290000,	-0.45358693263348410000,		-0.000216644186888848140000,	0.673111127738935560000,		-0.000216644186888848140000,	-0.45358693263348410000,		-0.000216644186888936290000,	0.13818225578280030000,			-0.000216644186888868090000,	-0.019370899699708920000,		-0.000216644186888887770000,	0.000985207756481372430000 },
													{ 0.001400248044141730000,		-0.000216644186888888560000,	-0.0259855145545702070000,		-0.000216644186888862070000,	0.185976095591570160000,		-0.000216644186888953820000,	-0.610151088452771220000,		-0.000216644186888835240000,	0.905634071759926610000,		-0.000216644186888835240000,	-0.610151088452771220000,		-0.000216644186888953820000,	0.185976095591570160000,		-0.000216644186888862070000,	-0.0259855145545702070000,		-0.000216644186888888560000,	0.001400248044141730000 },
													{ 0.00156829918464734320000,	-0.000216644186888888850000,	-0.0286637932745253820000,		-0.000216644186888859660000,	0.205327974259260050000,		-0.000216644186888960930000,	-0.673544416112713430000,		-0.000216644186888830040000,	0.999783355813111060000,		-0.000216644186888830040000,	-0.673544416112713430000,		-0.000216644186888960930000,	0.205327974259260050000,		-0.000216644186888859660000,	-0.0286637932745253820000,		-0.000216644186888888850000,	0.00156829918464734320000 },
													{ 0.001400248044141730000,		-0.000216644186888888560000,	-0.0259855145545702070000,		-0.000216644186888862070000,	0.185976095591570160000,		-0.000216644186888953820000,	-0.610151088452771220000,		-0.000216644186888835240000,	0.905634071759926610000,		-0.000216644186888835240000,	-0.610151088452771220000,		-0.000216644186888953820000,	0.185976095591570160000,		-0.000216644186888862070000,	-0.0259855145545702070000,		-0.000216644186888888560000,	0.001400248044141730000 },
													{ 0.000985207756481372430000,	-0.000216644186888887770000,	-0.019370899699708920000,		-0.000216644186888868090000,	0.13818225578280030000,			-0.000216644186888936290000,	-0.45358693263348410000,		-0.000216644186888848140000,	0.673111127738935560000,		-0.000216644186888848140000,	-0.45358693263348410000,		-0.000216644186888936290000,	0.13818225578280030000,			-0.000216644186888868090000,	-0.019370899699708920000,		-0.000216644186888887770000,	0.000985207756481372430000 },
													{ 0.000516406710280523270000,	-0.000216644186888886870000,	-0.0118994843784274890000,		-0.000216644186888874870000,	0.0841976119531329390000,		-0.000216644186888916470000,	-0.276742799117225710000,		-0.000216644186888862720000,	0.410469156191473670000,		-0.000216644186888862720000,	-0.276742799117225710000,		-0.000216644186888916470000,	0.0841976119531329390000,		-0.000216644186888874870000,	-0.0118994843784274890000,		-0.000216644186888886870000,	0.000516406710280523270000 },
													{ 0.000150241317361511160000,	-0.00021664418688888620000,		-0.00606380259198784420000,		-0.000216644186888880180000,	0.0420319459852840570000,		-0.0002166441868889010000,		-0.138615544156578060000,		-0.000216644186888874080000,	0.205327974259260050000,		-0.000216644186888874080000,	-0.138615544156578060000,		-0.0002166441868889010000,		0.0420319459852840570000,		-0.000216644186888880180000,	-0.00606380259198784420000,		-0.00021664418688888620000,		0.000150241317361511160000 },
													{ -6.59695199285921010000e-005,	-0.000216644186888885790000,	-0.0026179891164260210000,		-0.000216644186888883320000,	0.0171342518828273910000,		-0.000216644186888891860000,	-0.0570551071924256320000,		-0.00021664418688888080000,		0.0841976119531329390000,		-0.00021664418688888080000,		-0.0570551071924256320000,		-0.000216644186888891860000,	0.0171342518828273910000,		-0.000216644186888883320000,	-0.0026179891164260210000,		-0.000216644186888885790000,	-6.59695199285921010000e-005 },
													{ -0.000165867636685805850000,	-0.00021664418688888560000,		-0.00102588447810310350000,		-0.000216644186888884760000,	0.00563051421821007290000,		-0.000216644186888887630000,	-0.019370899699708920000,		-0.000216644186888883920000,	0.0282305049007476120000,		-0.000216644186888883920000,	-0.019370899699708920000,		-0.000216644186888887630000,	0.00563051421821007290000,		-0.000216644186888884760000,	-0.00102588447810310350000,		-0.00021664418688888560000,		-0.000165867636685805850000 },
													{ -0.000202603142700600670000,	-0.000216644186888885520000,	-0.000440420293033059370000,	-0.000216644186888885280000,	0.001400248044141730000,		-0.000216644186888886090000,	-0.00551329681440221750000,		-0.000216644186888885060000,	0.0076497365690452760000,		-0.000216644186888885060000,	-0.00551329681440221750000,		-0.000216644186888886090000,	0.001400248044141730000,		-0.000216644186888885280000,	-0.000440420293033059370000,	-0.000216644186888885520000,	-0.000202603142700600670000 },
													{ -0.000213458164049294360000,	-0.000216644186888885490000,	-0.000267420737091965140000,	-0.000216644186888885440000,	0.000150241317361511160000,		-0.000216644186888885630000,	-0.00141849613025914330000,		-0.000216644186888885380000,	0.00156829918464734320000,		-0.000216644186888885380000,	-0.00141849613025914330000,		-0.000216644186888885630000,	0.000150241317361511160000,		-0.000216644186888885440000,	-0.000267420737091965140000,	-0.000216644186888885490000,	-0.000213458164049294360000 } },
												{	{ -0.000214134630995543680000,	-0.000223776723112709650000,	-0.000265786932032037330000,	-0.000260486197811391280000,	4.97134655875106870000e-005,	0.000473356818591131160000,		-8.17539241526291530000e-005,	-0.00157541215951787070000,		-0.00174750913491093460000,		-8.81425456724273390000e-005,	0.000899967028943327880000,		0.000330813391145330870000,		-0.000313327068380500440000,	-0.000363588772779722020000,	-0.000246397192664999550000,	-0.00020940739692195480000,		-0.000212455820116682450000 },
													{ -0.000223776723112709650000,	-0.000276752245330171990000,	-0.000282242920061493450000,	0.000264630954308320160000,		0.00130408425975803420000,		0.000144252542662046390000,		-0.00467000861014636990000,		-0.00633109010842272490000,		0.000404658013336243150000,		0.00639879059704404240000,		0.00373276550870103390000,		-0.00107580924696983940000,		-0.00180326268368728290000,		-0.000617847560383964750000,	-0.000116281707141739880000,	-0.000153761896758942150000,	-0.000209407396921954830000 },
													{ -0.000265786932032037330000,	-0.000282242920061493450000,	0.000369653036981674190000,		0.00204139576350936950000,		0.000435739447470087230000,		-0.0100406499670049570000,		-0.0166541339484946040000,		0.00181635064276655070000,		0.0261901829988486910000,		0.0189938484443885790000,		-0.00531556469607083990000,		-0.0116869818686263660000,		-0.00375726491171347180000,		0.000850593343845249870000,		0.000593598448257943650000,		-0.000116281707141740460000,	-0.000246397192664999660000 },
													{ -0.000260486197811391280000,	0.000264630954308320160000,		0.00204139576350936650000,		0.00057817812008419990000,		-0.0148073585873103630000,		-0.0299680542957719880000,		0.00426632915846320620000,		0.0707639371444771930000,		0.0627112466972920560000,		-0.020575313029809510000,		-0.0560251303734258590000,		-0.0212138851397783850000,		0.0074884308558516030000,		0.00691012479671693210000,		0.000850593343845247050000,		-0.000617847560383965940000,	-0.000363588772779721920000 },
													{ 4.97134655875090610000e-005,	0.00130408425975803520000,		0.000435739447470087230000,		-0.0148073585873103630000,		-0.036474065750403670000,		0.00644080571244505780000,		0.128251963105421830000,		0.138582356490498270000,		-0.0549429945321079360000,		-0.183037643453210440000,		-0.0840438371584509430000,		0.0372656250325677850000,		0.042032948329216710000,		0.00748843085585157960000,		-0.00375726491171348220000,		-0.00180326268368728250000,		-0.000313327068380500060000 },
													{ 0.000473356818591131590000,	0.000144252542662051760000,		-0.0100406499670049570000,		-0.0299680542957719880000,		0.00644080571244505780000,		0.156344196320753580000,		0.205921701841042190000,		-0.0992679611922332730000,		-0.403466596458147640000,		-0.225548122324692350000,		0.122566351210613960000,		0.168447184789459910000,		0.0372656250325676670000,		-0.0212138851397784230000,		-0.0116869818686263630000,		-0.00107580924696983480000,		0.000330813391145331730000 },
													{ -8.17539241526270390000e-005,	-0.00467000861014636990000,		-0.0166541339484945930000,		0.0042663291584632080000,		0.128251963105421670000,		0.205921701841042190000,		-0.120927903064719770000,		-0.599108144764422870000,		-0.408050183798901730000,		0.270604912971661450000,		0.453154646603639020000,		0.122566351210613680000,		-0.0840438371584510820000,		-0.0560251303734258170000,		-0.0053155646960708260000,		0.00373276550870103650000,		0.000899967028943327010000 },
													{ -0.00157541215951787070000,	-0.00633109010842273020000,		0.00181635064276650390000,		0.0707639371444771380000,		0.138582356490498380000,		-0.0992679611922332730000,		-0.599108144764422650000,		-0.497232067982842470000,		0.401996425008270990000,		0.820349877738402070000,		0.270604912971661280000,		-0.225548122324692460000,		-0.183037643453210440000,		-0.020575313029809510000,		0.0189938484443886170000,		0.00639879059704402940000,		-8.81425456724330850000e-005 },
													{ -0.00174750913491093460000,	0.000404658013336229270000,		0.0261901829988486730000,		0.0627112466972920970000,		-0.0549429945321079360000,		-0.403466596458147590000,		-0.408050183798901730000,		0.401996425008270990000,		0.99978435815704370000,			0.401996425008270990000,		-0.408050183798901730000,		-0.403466596458147590000,		-0.0549429945321079360000,		0.0627112466972920970000,		0.0261901829988486730000,		0.000404658013336229270000,		-0.00174750913491093460000 },
													{ -8.81425456724330850000e-005,	0.00639879059704402940000,		0.0189938484443886170000,		-0.020575313029809510000,		-0.183037643453210440000,		-0.225548122324692460000,		0.270604912971661280000,		0.820349877738402070000,		0.401996425008270990000,		-0.497232067982842470000,		-0.599108144764422650000,		-0.0992679611922332730000,		0.138582356490498380000,		0.0707639371444771380000,		0.00181635064276650390000,		-0.00633109010842273020000,		-0.00157541215951787070000 },
													{ 0.000899967028943327010000,	0.00373276550870103650000,		-0.0053155646960708260000,		-0.0560251303734258170000,		-0.0840438371584510820000,		0.122566351210613680000,		0.453154646603639020000,		0.270604912971661450000,		-0.408050183798901730000,		-0.599108144764422870000,		-0.120927903064719770000,		0.205921701841042190000,		0.128251963105421670000,		0.0042663291584632080000,		-0.0166541339484945930000,		-0.00467000861014636990000,		-8.17539241526270390000e-005 },
													{ 0.000330813391145331730000,	-0.00107580924696983480000,		-0.0116869818686263630000,		-0.0212138851397784230000,		0.0372656250325676670000,		0.168447184789459910000,		0.122566351210613960000,		-0.225548122324692350000,		-0.403466596458147640000,		-0.0992679611922332730000,		0.205921701841042190000,		0.156344196320753580000,		0.00644080571244505780000,		-0.0299680542957719880000,		-0.0100406499670049570000,		0.000144252542662051760000,		0.000473356818591131590000 },
													{ -0.000313327068380500060000,	-0.00180326268368728250000,		-0.00375726491171348220000,		0.00748843085585157960000,		0.042032948329216710000,		0.0372656250325677850000,		-0.0840438371584509430000,		-0.183037643453210440000,		-0.0549429945321079360000,		0.138582356490498270000,		0.128251963105421830000,		0.00644080571244505780000,		-0.036474065750403670000,		-0.0148073585873103630000,		0.000435739447470087230000,		0.00130408425975803520000,		4.97134655875090610000e-005 },
													{ -0.000363588772779721920000,	-0.000617847560383965940000,	0.000850593343845247050000,		0.00691012479671693210000,		0.0074884308558516030000,		-0.0212138851397783850000,		-0.0560251303734258590000,		-0.020575313029809510000,		0.0627112466972920560000,		0.0707639371444771930000,		0.00426632915846320620000,		-0.0299680542957719880000,		-0.0148073585873103630000,		0.00057817812008419990000,		0.00204139576350936650000,		0.000264630954308320160000,		-0.000260486197811391280000 },
													{ -0.000246397192664999660000,	-0.000116281707141740460000,	0.000593598448257943650000,		0.000850593343845249870000,		-0.00375726491171347180000,		-0.0116869818686263660000,		-0.00531556469607083990000,		0.0189938484443885790000,		0.0261901829988486910000,		0.00181635064276655070000,		-0.0166541339484946040000,		-0.0100406499670049570000,		0.000435739447470087230000,		0.00204139576350936950000,		0.000369653036981674190000,		-0.000282242920061493450000,	-0.000265786932032037330000 },
													{ -0.000209407396921954830000,	-0.000153761896758942150000,	-0.000116281707141739880000,	-0.000617847560383964750000,	-0.00180326268368728290000,		-0.00107580924696983940000,		0.00373276550870103390000,		0.00639879059704404240000,		0.000404658013336243150000,		-0.00633109010842272490000,		-0.00467000861014636990000,		0.000144252542662046390000,		0.00130408425975803420000,		0.000264630954308320160000,		-0.000282242920061493450000,	-0.000276752245330171990000,	-0.000223776723112709650000 },
													{ -0.000212455820116682450000,	-0.00020940739692195480000,		-0.000246397192664999550000,	-0.000363588772779722020000,	-0.000313327068380500440000,	0.000330813391145330870000,		0.000899967028943327880000,		-8.81425456724273390000e-005,	-0.00174750913491093460000,		-0.00157541215951787070000,		-8.17539241526291530000e-005,	0.000473356818591131160000,		4.97134655875106870000e-005,	-0.000260486197811391280000,	-0.000265786932032037330000,	-0.000223776723112709650000,	-0.000214134630995543680000 } },
												{	{ -0.000213458164049299130000,	-0.000202603142700605410000,	-0.000165867636685810620000,	-6.59695199285968710000e-005,	0.000150241317361506390000,		0.00051640671028051850000,		0.000985207756481367660000,		0.00140024804414172520000,		0.00156829918464733840000,		0.00140024804414172520000,		0.000985207756481367660000,		0.00051640671028051850000,		0.000150241317361506390000,		-6.59695199285971420000e-005,	-0.00016586763668581070000,		-0.000202603142700605470000,	-0.000213458164049299130000 },
													{ -0.000216644186888890240000,	-0.000216644186888890290000,	-0.000216644186888890370000,	-0.000216644186888890560000,	-0.000216644186888890970000,	-0.000216644186888891650000,	-0.000216644186888892540000,	-0.000216644186888893330000,	-0.000216644186888893620000,	-0.000216644186888893330000,	-0.000216644186888892540000,	-0.000216644186888891650000,	-0.000216644186888890970000,	-0.000216644186888890560000,	-0.000216644186888890370000,	-0.000216644186888890290000,	-0.000216644186888890290000 },
													{ -0.000267420737091969860000,	-0.000440420293033064140000,	-0.00102588447810310820000,		-0.00261798911642602580000,		-0.00606380259198784860000,		-0.0118994843784274940000,		-0.0193708996997089270000,		-0.0259855145545702140000,		-0.0286637932745253880000,		-0.0259855145545702140000,		-0.0193708996997089270000,		-0.0118994843784274940000,		-0.00606380259198784860000,		-0.00261798911642602580000,		-0.00102588447810310820000,		-0.000440420293033064140000,	-0.000267420737091969910000 },
													{ -0.000216644186888890480000,	-0.000216644186888890050000,	-0.000216644186888889530000,	-0.000216644186888888090000,	-0.000216644186888884950000,	-0.000216644186888879640000,	-0.000216644186888872860000,	-0.000216644186888866840000,	-0.000216644186888864430000,	-0.000216644186888866840000,	-0.000216644186888872860000,	-0.000216644186888879640000,	-0.000216644186888884950000,	-0.000216644186888888090000,	-0.000216644186888889530000,	-0.000216644186888890050000,	-0.000216644186888889940000 },
													{ 0.000150241317361506390000,	0.00140024804414172520000,		0.00563051421821006860000,		0.0171342518828273840000,		0.0420319459852840780000,		0.0841976119531329250000,		0.13818225578280030000,			0.185976095591570160000,		0.205327974259260050000,		0.185976095591570160000,		0.13818225578280030000,			0.0841976119531328840000,		0.0420319459852840780000,		0.0171342518828273840000,		0.00563051421821006860000,		0.00140024804414172520000,		0.000150241317361506390000 },
													{ -0.000216644186888889750000,	-0.000216644186888887990000,	-0.000216644186888882020000,	-0.000216644186888865840000,	-0.000216644186888830790000,	-0.000216644186888921240000,	-0.000216644186888941060000,	-0.000216644186888958590000,	-0.00021664418688896570000,		-0.000216644186888958590000,	-0.000216644186888941060000,	-0.000216644186888921240000,	-0.000216644186888980740000,	-0.000216644186888927420000,	-0.000216644186888902790000,	-0.000216644186888893730000,	-0.000216644186888891050000 },
													{ -0.00141849613025914810000,	-0.00551329681440222190000,		-0.0193708996997089270000,		-0.0570551071924256320000,		-0.138615544156578060000,		-0.276742799117225710000,		-0.453586932633484150000,		-0.610151088452771220000,		-0.673544416112713430000,		-0.610151088452771220000,		-0.453586932633484150000,		-0.276742799117225710000,		-0.138615544156578060000,		-0.0570551071924256320000,		-0.0193708996997089270000,		-0.00551329681440222190000,		-0.00141849613025914810000 },
													{ -0.000216644186888891240000,	-0.000216644186888894570000,	-0.000216644186888905850000,	-0.000216644186888919540000,	-0.000216644186888961550000,	-0.00021664418688903270000,		-0.000216644186889123770000,	-0.000216644186888840010000,	-0.000216644186888834810000,	-0.000216644186888657810000,	-0.00021664418688871750000,		-0.000216644186888702260000,	-0.000216644186888796180000,	-0.000216644186888851610000,	-0.000216644186888877250000,	-0.000216644186888885090000,	-0.00021664418688888910000 },
													{ 0.00156829918464733840000,	0.00764973656904527170000,		0.0282305049007476050000,		0.0841976119531329250000,		0.205327974259260050000,		0.410469156191473670000,		0.673111127738935560000,		0.905634071759926610000,		0.999783355813111060000,		0.905634071759926610000,		0.673111127738935560000,		0.410469156191473670000,		0.205327974259260050000,		0.0841976119531329250000,		0.0282305049007476050000,		0.00764973656904527170000,		0.00156829918464733840000 },
													{ -0.00021664418688888910000,	-0.000216644186888885090000,	-0.000216644186888877250000,	-0.000216644186888851610000,	-0.000216644186888796180000,	-0.000216644186888702260000,	-0.00021664418688871750000,		-0.000216644186888657810000,	-0.000216644186888834810000,	-0.000216644186888840010000,	-0.000216644186889123770000,	-0.00021664418688903270000,		-0.000216644186888961550000,	-0.000216644186888919540000,	-0.000216644186888905850000,	-0.000216644186888894570000,	-0.000216644186888891240000 },
													{ -0.00141849613025914810000,	-0.00551329681440222190000,		-0.0193708996997089270000,		-0.0570551071924256320000,		-0.138615544156578060000,		-0.276742799117225710000,		-0.453586932633484150000,		-0.610151088452771220000,		-0.673544416112713430000,		-0.610151088452771220000,		-0.453586932633484150000,		-0.276742799117225710000,		-0.138615544156578060000,		-0.0570551071924256320000,		-0.0193708996997089270000,		-0.00551329681440222190000,		-0.00141849613025914810000 },
													{ -0.000216644186888891050000,	-0.000216644186888893730000,	-0.000216644186888902790000,	-0.000216644186888927420000,	-0.000216644186888980740000,	-0.000216644186888921240000,	-0.000216644186888941060000,	-0.000216644186888958590000,	-0.00021664418688896570000,		-0.000216644186888958590000,	-0.000216644186888941060000,	-0.000216644186888921240000,	-0.000216644186888830790000,	-0.000216644186888865840000,	-0.000216644186888882020000,	-0.000216644186888887990000,	-0.000216644186888889750000 },
													{ 0.000150241317361506390000,	0.00140024804414172520000,		0.00563051421821006860000,		0.0171342518828273840000,		0.0420319459852840780000,		0.0841976119531328840000,		0.13818225578280030000,			0.185976095591570160000,		0.205327974259260050000,		0.185976095591570160000,		0.13818225578280030000,			0.0841976119531329250000,		0.0420319459852840780000,		0.0171342518828273840000,		0.00563051421821006860000,		0.00140024804414172520000,		0.000150241317361506390000 },
													{ -0.000216644186888889940000,	-0.000216644186888890050000,	-0.000216644186888889530000,	-0.000216644186888888090000,	-0.000216644186888884950000,	-0.000216644186888879640000,	-0.000216644186888872860000,	-0.000216644186888866840000,	-0.000216644186888864430000,	-0.000216644186888866840000,	-0.000216644186888872860000,	-0.000216644186888879640000,	-0.000216644186888884950000,	-0.000216644186888888090000,	-0.000216644186888889530000,	-0.000216644186888890050000,	-0.000216644186888890480000 },
													{ -0.000267420737091969910000,	-0.000440420293033064140000,	-0.00102588447810310820000,		-0.00261798911642602580000,		-0.00606380259198784860000,		-0.0118994843784274940000,		-0.0193708996997089270000,		-0.0259855145545702140000,		-0.0286637932745253880000,		-0.0259855145545702140000,		-0.0193708996997089270000,		-0.0118994843784274940000,		-0.00606380259198784860000,		-0.00261798911642602580000,		-0.00102588447810310820000,		-0.000440420293033064140000,	-0.000267420737091969860000 },
													{ -0.000216644186888890290000,	-0.000216644186888890290000,	-0.000216644186888890370000,	-0.000216644186888890560000,	-0.000216644186888890970000,	-0.000216644186888891650000,	-0.000216644186888892540000,	-0.000216644186888893330000,	-0.000216644186888893620000,	-0.000216644186888893330000,	-0.000216644186888892540000,	-0.000216644186888891650000,	-0.000216644186888890970000,	-0.000216644186888890560000,	-0.000216644186888890370000,	-0.000216644186888890290000,	-0.000216644186888890240000 },
													{ -0.000213458164049299130000,	-0.000202603142700605470000,	-0.00016586763668581070000,		-6.59695199285971420000e-005,	0.000150241317361506390000,		0.00051640671028051850000,		0.000985207756481367660000,		0.00140024804414172520000,		0.00156829918464733840000,		0.00140024804414172520000,		0.000985207756481367660000,		0.00051640671028051850000,		0.000150241317361506390000,		-6.59695199285968710000e-005,	-0.000165867636685810620000,	-0.000202603142700605410000,	-0.000213458164049299130000 } },
												{	{ -0.000212455820116683020000,	-0.00020940739692195540000,		-0.000246397192665000250000,	-0.000363588772779722510000,	-0.000313327068380500610000,	0.000330813391145331190000,		0.000899967028943326470000,		-8.81425456724336540000e-005,	-0.00174750913491093520000,		-0.00157541215951787130000,		-8.17539241526276080000e-005,	0.000473356818591131050000,		4.97134655875084920000e-005,	-0.000260486197811391870000,	-0.000265786932032037870000,	-0.000223776723112710220000,	-0.000214134630995544250000 },
													{ -0.000209407396921955370000,	-0.000153761896758942750000,	-0.000116281707141741030000,	-0.000617847560383966480000,	-0.00180326268368728310000,		-0.00107580924696983530000,		0.0037327655087010360000,		0.00639879059704402850000,		0.000404658013336228730000,		-0.0063310901084227310000,		-0.00467000861014637070000,		0.000144252542662051190000,		0.00130408425975803460000,		0.000264630954308319620000,		-0.000282242920061493990000,	-0.000276752245330172530000,	-0.000223776723112710220000 },
													{ -0.000246397192665000140000,	-0.000116281707141740450000,	0.000593598448257943110000,		0.000850593343845246510000,		-0.00375726491171348270000,		-0.0116869818686263640000,		-0.00531556469607082690000,		0.0189938484443886170000,		0.0261901829988486730000,		0.00181635064276650320000,		-0.0166541339484945930000,		-0.0100406499670049570000,		0.000435739447470086680000,		0.00204139576350936610000,		0.000369653036981673640000,		-0.000282242920061493990000,	-0.000265786932032037870000 },
													{ -0.000363588772779722570000,	-0.000617847560383965290000,	0.000850593343845249330000,		0.00691012479671693130000,		0.00748843085585157880000,		-0.0212138851397784230000,		-0.0560251303734258170000,		-0.020575313029809510000,		0.0627112466972920970000,		0.0707639371444771380000,		0.00426632915846320710000,		-0.0299680542957719880000,		-0.0148073585873103630000,		0.000578178120084199360000,		0.00204139576350936910000,		0.000264630954308319620000,		-0.000260486197811391870000 },
													{ -0.000313327068380500990000,	-0.00180326268368728360000,		-0.00375726491171347230000,		0.00748843085585160220000,		0.042032948329216710000,		0.0372656250325676670000,		-0.0840438371584510820000,		-0.183037643453210440000,		-0.0549429945321079360000,		0.138582356490498380000,		0.128251963105421670000,		0.00644080571244505690000,		-0.036474065750403670000,		-0.0148073585873103630000,		0.000435739447470086680000,		0.00130408425975803350000,		4.97134655875101180000e-005 },
													{ 0.000330813391145330320000,	-0.001075809246969840000,		-0.0116869818686263680000,		-0.0212138851397783850000,		0.0372656250325677850000,		0.168447184789459910000,		0.122566351210613680000,		-0.225548122324692460000,		-0.403466596458147590000,		-0.0992679611922332730000,		0.205921701841042190000,		0.156344196320753580000,		0.00644080571244505690000,		-0.0299680542957719880000,		-0.0100406499670049570000,		0.000144252542662045820000,		0.000473356818591130620000 },
													{ 0.000899967028943327330000,	0.00373276550870103340000,		-0.00531556469607084080000,		-0.0560251303734258590000,		-0.0840438371584509430000,		0.122566351210613960000,		0.453154646603639020000,		0.270604912971661280000,		-0.408050183798901730000,		-0.599108144764422650000,		-0.120927903064719770000,		0.205921701841042190000,		0.128251963105421830000,		0.00426632915846320540000,		-0.0166541339484946040000,		-0.00467000861014637070000,		-8.17539241526297220000e-005 },
													{ -8.81425456724279080000e-005,	0.00639879059704404150000,		0.0189938484443885790000,		-0.020575313029809510000,		-0.183037643453210440000,		-0.225548122324692350000,		0.270604912971661450000,		0.820349877738402070000,		0.401996425008270990000,		-0.497232067982842470000,		-0.599108144764422870000,		-0.0992679611922332730000,		0.138582356490498270000,		0.0707639371444771930000,		0.00181635064276655010000,		-0.00633109010842272580000,		-0.00157541215951787130000 },
													{ -0.00174750913491093520000,	0.000404658013336242610000,		0.0261901829988486910000,		0.0627112466972920560000,		-0.0549429945321079360000,		-0.403466596458147640000,		-0.408050183798901730000,		0.401996425008270990000,		0.99978435815704370000,			0.401996425008270990000,		-0.408050183798901730000,		-0.403466596458147640000,		-0.0549429945321079360000,		0.0627112466972920560000,		0.0261901829988486910000,		0.000404658013336242610000,		-0.00174750913491093520000 },
													{ -0.00157541215951787130000,	-0.00633109010842272580000,		0.00181635064276655010000,		0.0707639371444771930000,		0.138582356490498270000,		-0.0992679611922332730000,		-0.599108144764422870000,		-0.497232067982842470000,		0.401996425008270990000,		0.820349877738402070000,		0.270604912971661450000,		-0.225548122324692350000,		-0.183037643453210440000,		-0.020575313029809510000,		0.0189938484443885790000,		0.00639879059704404150000,		-8.81425456724279080000e-005 },
													{ -8.17539241526297220000e-005,	-0.00467000861014637070000,		-0.0166541339484946040000,		0.00426632915846320540000,		0.128251963105421830000,		0.205921701841042190000,		-0.120927903064719770000,		-0.599108144764422650000,		-0.408050183798901730000,		0.270604912971661280000,		0.453154646603639020000,		0.122566351210613960000,		-0.0840438371584509430000,		-0.0560251303734258590000,		-0.00531556469607084080000,		0.00373276550870103340000,		0.000899967028943327330000 },
													{ 0.000473356818591130620000,	0.000144252542662045820000,		-0.0100406499670049570000,		-0.0299680542957719880000,		0.00644080571244505690000,		0.156344196320753580000,		0.205921701841042190000,		-0.0992679611922332730000,		-0.403466596458147590000,		-0.225548122324692460000,		0.122566351210613680000,		0.168447184789459910000,		0.0372656250325677850000,		-0.0212138851397783850000,		-0.0116869818686263680000,		-0.001075809246969840000,		0.000330813391145330320000 },
													{ 4.97134655875101180000e-005,	0.00130408425975803350000,		0.000435739447470086680000,		-0.0148073585873103630000,		-0.036474065750403670000,		0.00644080571244505690000,		0.128251963105421670000,		0.138582356490498380000,		-0.0549429945321079360000,		-0.183037643453210440000,		-0.0840438371584510820000,		0.0372656250325676670000,		0.042032948329216710000,		0.00748843085585160220000,		-0.00375726491171347230000,		-0.00180326268368728360000,		-0.000313327068380500990000 },
													{ -0.000260486197811391870000,	0.000264630954308319620000,		0.00204139576350936910000,		0.000578178120084199360000,		-0.0148073585873103630000,		-0.0299680542957719880000,		0.00426632915846320710000,		0.0707639371444771380000,		0.0627112466972920970000,		-0.020575313029809510000,		-0.0560251303734258170000,		-0.0212138851397784230000,		0.00748843085585157880000,		0.00691012479671693130000,		0.000850593343845249330000,		-0.000617847560383965290000,	-0.000363588772779722570000 },
													{ -0.000265786932032037870000,	-0.000282242920061493990000,	0.000369653036981673640000,		0.00204139576350936610000,		0.000435739447470086680000,		-0.0100406499670049570000,		-0.0166541339484945930000,		0.00181635064276650320000,		0.0261901829988486730000,		0.0189938484443886170000,		-0.00531556469607082690000,		-0.0116869818686263640000,		-0.00375726491171348270000,		0.000850593343845246510000,		0.000593598448257943110000,		-0.000116281707141740450000,	-0.000246397192665000140000 },
													{ -0.000223776723112710220000,	-0.000276752245330172530000,	-0.000282242920061493990000,	0.000264630954308319620000,		0.00130408425975803460000,		0.000144252542662051190000,		-0.00467000861014637070000,		-0.0063310901084227310000,		0.000404658013336228730000,		0.00639879059704402850000,		0.0037327655087010360000,		-0.00107580924696983530000,		-0.00180326268368728310000,		-0.000617847560383966480000,	-0.000116281707141741030000,	-0.000153761896758942750000,	-0.000209407396921955370000 },
													{ -0.000214134630995544250000,	-0.000223776723112710220000,	-0.000265786932032037870000,	-0.000260486197811391870000,	4.97134655875084920000e-005,	0.000473356818591131050000,		-8.17539241526276080000e-005,	-0.00157541215951787130000,		-0.00174750913491093520000,		-8.81425456724336540000e-005,	0.000899967028943326470000,		0.000330813391145331190000,		-0.000313327068380500610000,	-0.000363588772779722510000,	-0.000246397192665000250000,	-0.00020940739692195540000,		-0.000212455820116683020000 } } };

	const size_t orientations = sizeof( gabor::GABOR_KERNELS ) / sizeof( gabor::GABOR_KERNELS[ 0 ] );

	template< class T1, class T2 >
	bool filter( const mist::array2< T1 >& in, const size_t theta, mist::array2< T2 >& out )
	{
		if( in.empty( ) || orientations <= theta )
		{
			return false;
		}

		const int kernel_width = sizeof( GABOR_KERNELS[ theta ] ) / sizeof( GABOR_KERNELS[ theta ][ 0 ] );
		const int kernel_height = sizeof( GABOR_KERNELS[ theta ][ 0 ] ) / sizeof( GABOR_KERNELS[ theta ][ 0 ][ 0 ] );
		kernel_type gabor_kernel( kernel_width, kernel_height, GABOR_KERNELS[ theta ][ 0 ], kernel_width * kernel_height );

		out.resize( in.width( ), in.height( ) );
		out.fill( static_cast< T2 >( 0 ) );

		// mist::linear_filterとほぼ同等の処理（だけど端の部分にノイズが発生するため不使用）
		for( int x = 0; x < static_cast< int >( in.width( ) ); ++x )
		{
			for( int y = 0; y < static_cast< int >( in.height( ) ); ++y )
			{
				for( int i = - kernel_width / 2; i <= kernel_width / 2; ++i )
				{
					for( int j = - kernel_height / 2; j <= kernel_height / 2; ++j )
					{
						if( 0 <= x + i && x + i < static_cast< int >( in.width( ) ) && 0 <= y + j && y + j < static_cast< int >( in.height( ) ) )
						{
							out( x, y ) += in( x + i, y + j ) * gabor_kernel( i + kernel_width / 2, j + kernel_height / 2 );
						}
					}
				}
			}
		}

		return true;
	}
}

// IttiらのSaliency map関連のアルゴリズム
namespace __itti__
{

	typedef double						value_type;		///< @brief Feature map および Conspicuity mapで使用するデータ型
	typedef mist::array2< value_type >	map_type;		///< @brief Feature map および Conspicuity mapの型
	typedef mist::array< map_type >		pyramid_type;	///< @brief Gaussianピラミッドの型
	typedef mist::array< map_type >		maps_type;		///< @brief Feature mapを管理するコンテナの型

	// ガウシアンピラミッドを作成
	inline bool build_gaussian_pyramid( const map_type& in, const double gauss_sigma, const size_t scale_offset, const size_t pyramid_scales, pyramid_type& out_pyr )
	{
		if( scale_offset >= pyramid_scales || pyramid_scales == 0 )
		{
			return false;
		}

		out_pyr.resize( pyramid_scales );

		// スケール0 〜 スケールscale_min_c-1 はスキップ（要素だけは確保しておく）
		// スケールscale_min_c 〜 スケールpyramid_scales-1 を格納
		map_type temp1, temp2;
		for( pyramid_type::size_type l = 1; l < out_pyr.size( ); ++l )
		{
			const map_type& src_map = ( l == 1 ? in : ( l <= scale_offset ? temp1 : out_pyr[ l - 1 ] ) );
			map_type& dst_map = ( l < scale_offset ? temp1 : out_pyr[ l ] );
			if( !mist::gaussian_filter( src_map, temp2, gauss_sigma )
				|| !mist::nearest::interpolate( temp2, dst_map, src_map.width( ) / 2 + ( src_map.width( ) % 2 ), src_map.height( ) / 2 + ( src_map.height( ) % 2 ) ) )
			{
				return false;
			}
		}

		return true;
	}

	// Center-Surround difference
	inline bool across_scale_difference( const pyramid_type& in1_pyr, const pyramid_type& in2_pyr, const size_t scale_min_c, const size_t scale_max_c, const size_t scale_min_d, const size_t scale_max_d, maps_type& out_fms )
	{
		out_fms.resize( ( scale_max_c - scale_min_c + 1 ) * ( scale_max_d - scale_min_d + 1 ) );
		if( out_fms.empty( ) )
		{
			return false;
		}

		size_t level = 0;
		for( size_t c = scale_min_c; c <= scale_max_c; ++c )
		{
			for( size_t d = scale_min_d; d <= scale_max_d; ++d )
			{
				const size_t s = c + d;
				const map_type& center = in1_pyr[ c ];
				const map_type& surround = in2_pyr[ s ];

				// スケール間差分
				map_type ex_surround;
				mist::linear::interpolate( surround, ex_surround, center.width( ), center.height( ) );
				out_fms[ level ].resize( ex_surround.width( ), ex_surround.height( ) );
				for( size_t i = 0; i < center.size( ); ++i )
				{
					out_fms[ level ][ i ] = std::fabs( center[ i ] - ex_surround[ i ] );
				}
				++level;
			}
		}
		
		return true;
	}

	// Center-Surround addition
	inline bool across_scale_addition( const maps_type& in_fms, const map_type::size_type base_width, const map_type::size_type base_height, map_type& out_fm )
	{
		if( in_fms.empty( )
			|| base_width == 0
			|| base_height == 0 )
		{
			return false;
		}

		out_fm.resize( base_width, base_height );
		out_fm.fill( 0 );

		// 各Feature mapをTARGET_SCALEに縮小してからスケール間差分
		for( maps_type::size_type l = 0; l < in_fms.size( ); ++l )
		{
			map_type target_scale_in_fms;
			mist::linear::interpolate( in_fms[ l ], target_scale_in_fms, base_width, base_height );	// interpolateのアルゴリズムは何が良いんだろう？（meanよりlinearの方が，Saliency mapにおけるピークが強く出る傾向があるっぽい）
			for( map_type::size_type i = 0; i < target_scale_in_fms.size( ); ++i )
			{
				out_fm[ i ] += target_scale_in_fms[ i ];
			}
		}

		return true;
	}

	// 画像の画素値に関する正規化
	template< class T1, class T2 >
	inline bool normalize( const mist::array2< T1 >& in, mist::array2< T2 >& out, const T2 out_min = 0.0, const T2 out_max = 1.0 )
	{
		typedef typename mist::array2< T1 >::size_type size_type;

		if( in.empty( ) || out_min > out_max )
		{
			return false;
		}

		T1 in_min = in[ 0 ];
		T1 in_max = in[ 0 ];
		for( size_type i = 1; i < in.size( ); ++i )
		{
			const T1 val = in[ i ];
			if( in_max < val )
			{
				in_max = val;
			}
			else if( in_min > val )
			{
				in_min = val;
			}
		}

		out.resize( in.width( ), in.height( ) );
		const T1 in_range = in_max - in_min;
		const T2 out_range = out_max - out_min;
		for( size_type i = 0; i < in.size( ); ++i )
		{
			out[ i ] = static_cast< T2 >( ( in[ i ] - in_min ) / in_range ) * out_range + out_min;
		}

		return true;
	}

	// 最大値・極大値を考慮した正規化（関数N）
	inline bool normalize_map_with_local_maxima( const map_type& in, const size_t step_local_maxima, map_type& out )
	{
		const value_type global_max = 1.0;
		if( !normalize( in, out, 0.0, global_max ) )
		{
			return false;
		}

		size_t local_maxima_count = 0;
		value_type local_maxima_sum = 0;

		// ±step_local_maximaの範囲の最大値を極大値とする
		for( map_type::size_type x = 0; x < out.width( ) - step_local_maxima; x += step_local_maxima )
		{
			for( map_type::size_type y = 0; y < out.height( ) - step_local_maxima; y += step_local_maxima )
			{
				value_type local_max = 0;
				for( map_type::size_type i = 0; i < step_local_maxima; ++i )
				{
					for( map_type::size_type j = 0; j < step_local_maxima; ++j )
					{
						if( local_max < out( x + i, y + j ) )
						{
							local_max = out( x + i, y + j );
						}
					}
				}
				if( global_max != local_max )
				{
					local_maxima_sum += local_max;
					++local_maxima_count;
				}
			}
		}

		const value_type normalize_factor = std::pow( global_max - local_maxima_sum / local_maxima_count, 2.0 );
		for( map_type::size_type i = 0; i < out.size( ); ++i )
		{
			out[ i ] *= normalize_factor;
		}

		return true;
	}

	// 最大値・極大値を考慮した正規化（関数N）
	inline bool normalize_maps_with_local_maxima( const maps_type& in_fms, const size_t step_local_maxima, maps_type& out_fms )
	{
		if( in_fms.empty( ) )
		{
			return false;
		}

		out_fms.resize( in_fms.size( ) );
		for( maps_type::size_type l = 0; l < in_fms.size( ); ++l )
		{
			if( !normalize_map_with_local_maxima( in_fms[ l ], step_local_maxima, out_fms[ l ] ) )
			{
				return false;
			}
		}

		return true;
	}

	// 特徴抽出
	template< class T, class Allocator >
	inline bool create_original_feature_maps( const mist::array2< mist::rgb< T >, Allocator >& in, map_type& i_fm, map_type& rg_fm, map_type& by_fm )
	{
		typedef typename mist::array2< mist::rgb< T >, Allocator >::size_type size_type;

		if( in.empty( ) )
		{
			return false;
		}

		const size_type w = in.width( );
		const size_type h = in.height( );
		const size_type size = in.size( );

		// Intensity
		i_fm.resize( w, h );
		value_type max_i = 0;
		for( size_type i = 0; i < size; ++i )
		{
			i_fm[ i ] = in[ i ].get_average( );
			if( max_i < i_fm[ i ] )
			{
				max_i = i_fm[ i ];
			}
		}

		// Red, Green, Blue, Yellow
		rg_fm.resize( w, h );
		by_fm.resize( w, h );
		for( size_type k = 0; k < size; ++k )
		{
			const value_type i = i_fm[ k ];
			if( max_i > i * 10 )
			{
				rg_fm[ k ] = by_fm[ k ] = 0;
			}
			else
			{
				const value_type r = in[ k ].r / i;
				const value_type g = in[ k ].g / i;
				const value_type b = in[ k ].b / i;
				const value_type R = std::max< value_type >( 0.0, r - ( g + b ) / 2.0 );
				const value_type G = std::max< value_type >( 0.0, g - ( r + b ) / 2.0 );
				const value_type B = std::max< value_type >( 0.0, b - ( r + g ) / 2.0 );
				const value_type Y = std::max< value_type >( 0.0, ( r + g ) / 2.0 - std::abs( r - g ) / 2.0 - b );

				rg_fm[ k ] = R - G;
				by_fm[ k ] = B - Y;
			}
		}

		return true;
	}

	// Conspicuity mapを作成（Intensity）
	inline bool conspicuity_map_for_intensity( const map_type& i_image, const size_t step_local_maxima, const double gauss_sigma, const size_t scale_min_c, const size_t scale_max_c, const size_t scale_min_d, const size_t scale_max_d, const size_t base_scale, map_type& i_ncm )
	{
		if( scale_min_c > scale_max_c
			|| scale_min_d > scale_max_d
			|| scale_min_c > base_scale
			|| base_scale > scale_max_c + scale_max_d
			|| i_image.empty( ) )
		{
			return false;
		}
		const pyramid_type::size_type pyramid_size = scale_max_c + scale_max_d + 1;

		// Intensity feature maps
		maps_type i_fms;
		map_type::size_type base_width, base_height;
		{
			// ガウシアンピラミッド
			pyramid_type i_pyr;
			if( !build_gaussian_pyramid( i_image, gauss_sigma, scale_min_c, pyramid_size, i_pyr ) )
			{
				return false;
			}

			// Center-Surround difference
			if( !across_scale_difference( i_pyr, i_pyr, scale_min_c, scale_max_c, scale_min_d, scale_max_d, i_fms ) )
			{
				return false;
			}

			base_width = i_pyr[ base_scale ].width( );
			base_height = i_pyr[ base_scale ].height( );
		}

		// Conspicuity map
		map_type i_cm;
		{
			pyramid_type i_nfms;
			if( !normalize_maps_with_local_maxima( i_fms, step_local_maxima, i_nfms ) || !across_scale_addition( i_nfms, base_width, base_height, i_cm ) )
			{
				return false;
			}
		}

		// 正規化
		return normalize_map_with_local_maxima( i_cm, step_local_maxima, i_ncm );
	}

	// Conspicuity mapを作成（Color）
	inline bool conspicuity_map_for_color( const map_type& rg_image, const map_type& by_image, const size_t step_local_maxima, const double gauss_sigma, const size_t scale_min_c, const size_t scale_max_c, const size_t scale_min_d, const size_t scale_max_d, const size_t base_scale, map_type& c_ncm )
	{
		if( scale_min_c > scale_max_c
			|| scale_min_d > scale_max_d
			|| scale_min_c > base_scale
			|| base_scale > scale_max_c + scale_max_d
			|| rg_image.empty( )
			|| by_image.empty( ) )
		{
			return false;
		}
		const pyramid_type::size_type pyramid_size = scale_max_c + scale_max_d + 1;

		// Red-Green feature maps
		maps_type rg_fms;
		map_type::size_type base_width, base_height;
		{
			// ガウシアンピラミッド
			pyramid_type rg_pyr;
			if( !build_gaussian_pyramid( rg_image, gauss_sigma, scale_min_c, pyramid_size, rg_pyr ) )
			{
				return false;
			}
		
			// Center-Surround difference
			if( !across_scale_difference( rg_pyr, -rg_pyr, scale_min_c, scale_max_c, scale_min_d, scale_max_d, rg_fms ) )
			{
				return false;
			}

			base_width = rg_pyr[ base_scale ].width( );
			base_height = rg_pyr[ base_scale ].height( );
		}

		// Blue-Yellow feature maps
		maps_type by_fms;
		{
			// ガウシアンピラミッド
			pyramid_type by_pyr;
			if( !build_gaussian_pyramid( by_image, gauss_sigma, scale_min_c, pyramid_size, by_pyr ) )
			{
				return false;
			}
		
			// Center-Surround difference
			if( !across_scale_difference( by_pyr, -by_pyr, scale_min_c, scale_max_c, scale_min_d, scale_max_d, by_fms ) )
			{
				return false;
			}

			if( base_width != by_pyr[ base_scale ].width( ) || base_height != by_pyr[ base_scale ].height( ) )
			{
				return false;
			}
		}

		// Conspicuity map
		map_type c_cm;
		{
			pyramid_type rg_nfms, by_nfms;
			if( !normalize_maps_with_local_maxima( rg_fms, step_local_maxima, rg_nfms )
				|| !normalize_maps_with_local_maxima( by_fms, step_local_maxima, by_nfms ) )
			{
				return false;
			}

			pyramid_type rg_by_nfms( rg_nfms.size( ) );
			for( maps_type::size_type l = 0; l < rg_by_nfms.size( ); ++l )
			{
				rg_by_nfms[ l ].resize( rg_nfms[ l ].width( ), rg_nfms[ l ].height( ) );
				for( map_type::size_type i = 0; i < rg_by_nfms[ l ].size( ); ++i )
				{
					rg_by_nfms[ l ][ i ] = rg_nfms[ l ][ i ] + by_nfms[ l ][ i ];
				}
			}

			if( !across_scale_addition( rg_by_nfms, base_width, base_height, c_cm ) )
			{
				return false;
			}
		}

		// 正規化
		return normalize_map_with_local_maxima( c_cm, step_local_maxima, c_ncm );
	}

	// Conspicuity mapを作成（Orientation）
	inline bool conspicuity_map_for_orientation( const map_type& i_image, const size_t step_local_maxima, const double gauss_sigma, const size_t scale_min_c, const size_t scale_max_c, const size_t scale_min_d, const size_t scale_max_d, const size_t base_scale, map_type& o_ncm )
	{
		if( scale_min_c > scale_max_c
			|| scale_min_d > scale_max_d
			|| scale_min_c > base_scale
			|| base_scale > scale_max_c + scale_max_d
			|| i_image.empty( ) )
		{
			return false;
		}
		const pyramid_type::size_type pyramid_size = scale_max_c + scale_max_d + 1;

		// 各方向について
		maps_type nneo_fms( gabor::orientations );
		for( maps_type::size_type t = 0; t < nneo_fms.size( ); ++t )
		{
			// 各方向成分のOrientation feature maps
			maps_type o_fms;
			map_type::size_type base_width, base_height;
			{
				// ガウシアンピラミッド
				pyramid_type o_pyr;
				{
					pyramid_type i_pyr;
					if( !build_gaussian_pyramid( i_image, gauss_sigma, scale_min_c, pyramid_size, i_pyr ) )
					{
						return false;
					}

					o_pyr.resize( i_pyr.size( ) );
					for( pyramid_type::size_type l = scale_min_c; l < o_pyr.size( ); ++l )
					{
						gabor::filter( i_pyr[ l ], t, o_pyr[ l ] );
					}
				}
		
				// Center-Surround difference
				if( !across_scale_difference( o_pyr, o_pyr, scale_min_c, scale_max_c, scale_min_d, scale_max_d, o_fms ) )
				{
					return false;
				}

				base_width = o_pyr[ base_scale ].width( );
				base_height = o_pyr[ base_scale ].height( );
			}

			// 方向成分毎に統合されたOrientation feature maps
			maps_type o_nfms;
			map_type neo_fm;
			if( !normalize_maps_with_local_maxima( o_fms, step_local_maxima, o_nfms )
				|| !across_scale_addition( o_nfms, base_width, base_height, neo_fm )
				|| !normalize_map_with_local_maxima( neo_fm, step_local_maxima, nneo_fms[ t ] ) )
			{
				return false;
			}
		}

		// Conspicuity map
		map_type o_cm( nneo_fms[ 0 ].width( ), nneo_fms[ 0 ].height( ) );
		for( maps_type::size_type t = 0; t < nneo_fms.size( ); ++t )
		{
			for( map_type::size_type i = 0; i < o_cm.size( ); ++i )
			{
				o_cm[ i ] += nneo_fms[ t ][ i ];
			}
		}

		// 正規化
		return normalize_map_with_local_maxima( o_cm, step_local_maxima, o_ncm );
	}

	// Conspicuity mapsを作成
	template< class T, class Allocator >
	inline bool create_comspicuity_maps( const mist::array2< mist::rgb< T >, Allocator >& in, map_type& i_cm, map_type& c_cm, map_type& o_cm, const double gauss_sigma = 5, const size_t step_local_maxima = 3, const size_t scale_min_c = 2, const size_t scale_max_c = 4, const size_t scale_min_d = 3, const size_t scale_max_d = 4, const size_t base_scale = 4 )
	{
		if( in.empty( ) )
		{
			return false;
		}

		// 特徴抽出
		map_type i_image, rg_image, by_image;
		if( !create_original_feature_maps( in, i_image, rg_image, by_image ) )
		{
			return false;
		}

		// Conspicuity maps
		return ( conspicuity_map_for_intensity( i_image, step_local_maxima, gauss_sigma, scale_min_c, scale_max_c, scale_min_d, scale_max_d, base_scale, i_cm )
				&& conspicuity_map_for_color( rg_image, by_image, step_local_maxima, gauss_sigma, scale_min_c, scale_max_c, scale_min_d, scale_max_d, base_scale, c_cm )
				&& conspicuity_map_for_orientation( i_image, step_local_maxima, gauss_sigma, scale_min_c, scale_max_c, scale_min_d, scale_max_d, base_scale, o_cm ) );
	}

} // 名前空間 __itti__ の終わり

namespace itti
{
	/// IttiらのSaliency map関連のアルゴリズム
	//! - 参考文献
	//!   - Laurent Itti, Christof Koch, and Ernst Niebur,
	//!     "A model of saliency-based visual attention for rapid scene analysis,"
	//!     IEEE Transactions on Pattern Analysis and Machine Intelligence, vol.20, no.11, Nov. 1998
	//!

	/// @brief Saliency mapを計算（Conspicuity mapsも同時に出力）
	//! 
	//! RGBカラー画像からIntensity maps（6種類），Color maps（12種類），Orientation maps（24種類）の特徴マップを作成・統合することでSaliency mapを計算する．
	//! 
	//! @param[in]  in                 … 入力画像（RGBカラー画像）
	//! @param[out] i_cm               … 出力画像（Conspicuity map for intensity）
	//! @param[out] c_cm               … 出力画像（Conspicuity map for color）
	//! @param[out] o_cm               … 出力画像（Conspicuity map for orientation）
	//! @param[out] sm                 … 出力画像（Saliency map）
	//! @param[in]  intensity_weight   … Intensity mapの重み（デフォルト：1.0）
	//! @param[in]  color_weight       … Color mapの重み（デフォルト：1.0）
	//! @param[in]  orientation_weight … Orientation mapの重み（デフォルト：1.0）
	//! @param[in]  gauss_sigma        … ガウシアンピラミッド作成時のガウシアンカーネルのサイズ（デフォルト：5）
	//! @param[in]  step_local_maxima  … 極大値を考慮した正規化処理における極大値探索の範囲（デフォルト：3）
	//! @param[in]  scale_min_c        … Centerの最小スケール
	//! @param[in]  scale_max_c        … Centerの最大スケール
	//! @param[in]  scale_min_d        … Delta（Surround = Center + Delta）の最小スケール
	//! @param[in]  scale_max_d        … Delta（Surround = Center + Delta）の最大スケール
	//! @param[in]  base_scale         … Across-scale additionにおけるCenterのベーススケール
	//!
	template< class T1, class Allocator1, class T2, class Allocator2 >
	bool saliency_map( const mist::array2< mist::rgb< T1 >, Allocator1 >& in, __itti__::map_type& i_cm, __itti__::map_type& c_cm, __itti__::map_type& o_cm, mist::array2< T2, Allocator2 >& sm, const double intensity_weight = 1.0, const double color_weight = 1.0, const double orientation_weight = 1.0, const double gauss_sigma = 5, const size_t step_local_maxima = 3, const size_t scale_min_c = 2, const size_t scale_max_c = 4, const size_t scale_min_d = 3, const size_t scale_max_d = 4, const size_t base_scale = 4 )
	{
		if( !__itti__::create_comspicuity_maps( in, i_cm, c_cm, o_cm, gauss_sigma, step_local_maxima, scale_min_c, scale_max_c, scale_min_d, scale_max_d, base_scale ) )
		{
			return false;
		}

		// Saliency map
		__itti__::map_type temp_sm( i_cm.width( ), i_cm.height( ) );
		for( __itti__::map_type::size_type i = 0; i < temp_sm.size( ); ++i )
		{
			temp_sm[ i ] = intensity_weight * i_cm[ i ] + color_weight * c_cm[ i ] + orientation_weight * o_cm[ i ];
		}
		if( !__itti__::normalize( temp_sm, sm, static_cast< T2 >( 0 ), static_cast< T2 >( 255 ) ) )
		{
			return false;
		}

		// Conspicuity maps
		__itti__::map_type temp;
		return ( __itti__::normalize( i_cm, temp, __itti__::map_type::value_type( 0 ), __itti__::map_type::value_type( 255 ) )
				&& mist::linear::interpolate( temp, i_cm, in.width( ), in.height( ) )
				&& __itti__::normalize( c_cm, temp, __itti__::map_type::value_type( 0 ), __itti__::map_type::value_type( 255 ) )
				&& mist::linear::interpolate( temp, c_cm, in.width( ), in.height( ) )
				&& __itti__::normalize( o_cm, temp, __itti__::map_type::value_type( 0 ), __itti__::map_type::value_type( 255 ) )
				&& mist::linear::interpolate( temp, o_cm, in.width( ), in.height( ) ) );
	}

	/// @brief Saliency mapを計算
	//! 
	//! RGBカラー画像からIntensity maps（6種類），Color maps（12種類），Orientation maps（24種類）の特徴マップを作成・統合することでSaliency mapを計算する．
	//! 
	//! @param[in]  in                 … 入力画像（RGBカラー画像）
	//! @param[out] sm                 … 出力画像（Saliency map）
	//! @param[in]  intensity_weight   … Intensity mapの重み（デフォルト：1.0）
	//! @param[in]  color_weight       … Color mapの重み（デフォルト：1.0）
	//! @param[in]  orientation_weight … Orientation mapの重み（デフォルト：1.0）
	//! @param[in]  gauss_sigma        … ガウシアンピラミッド作成時のガウシアンカーネルのサイズ（デフォルト：5）
	//! @param[in]  step_local_maxima  … 極大値を考慮した正規化処理における極大値探索の範囲（デフォルト：3）
	//! @param[in]  scale_min_c        … Centerの最小スケール
	//! @param[in]  scale_max_c        … Centerの最大スケール
	//! @param[in]  scale_min_d        … Delta（Surround = Center + Delta）の最小スケール
	//! @param[in]  scale_max_d        … Delta（Surround = Center + Delta）の最大スケール
	//! @param[in]  base_scale         … Across-scale additionにおけるCenterのベーススケール
	//! 
	template< class T1, class Allocator1, class T2, class Allocator2 >
	bool saliency_map( const mist::array2< mist::rgb< T1 >, Allocator1 >& in, mist::array2< T2, Allocator2 >& sm, const double intensity_weight = 1.0, const double color_weight = 1.0, const double orientation_weight = 1.0, const double gauss_sigma = 5, const size_t step_local_maxima = 3, const size_t scale_min_c = 2, const size_t scale_max_c = 4, const size_t scale_min_d = 3, const size_t scale_max_d = 4, const size_t base_scale = 4 )
	{
		mist::__itti__::map_type i_cm, c_cm, o_cm;
		if( !__itti__::create_comspicuity_maps( in, i_cm, c_cm, o_cm, gauss_sigma, step_local_maxima, scale_min_c, scale_max_c, scale_min_d, scale_max_d, base_scale ) )
		{
			return false;
		}

		// Saliency map
		__itti__::map_type temp_sm( i_cm.width( ), i_cm.height( ) );
		for( __itti__::map_type::size_type i = 0; i < temp_sm.size( ); ++i )
		{
			temp_sm[ i ] = intensity_weight * i_cm[ i ] + color_weight * c_cm[ i ] + orientation_weight * o_cm[ i ];
		}
		return __itti__::normalize( temp_sm, sm, static_cast< T2 >( 0 ), static_cast< T2 >( 255 ) );
	}

} // 名前空間 itti の終わり


// mist名前空間の終わり
_MIST_END


#endif // __INCLUDE_MIST_SALIENCY_MAP__
